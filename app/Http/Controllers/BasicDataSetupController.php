<?php namespace App\Http\Controllers;use App\Http\Requests;use App\Http\Controllers\Controller;use App\RefCategory;use App\RefPart;use App\RefType;use App\BasicEquipment;use App\BasicFailure;use App\RefFailureMode;use App\RefFailureCause;use App\RefTaskType;use App\RefTaskList;use App\BasicTask;// use Illuminate\Http\Request;use View;use Input;use Redirect;use Validator;use Session;use Auth;use Response;use File;use Excel;use DB;class BasicDataSetupController extends Controller {	public function __construct()	{		$this->middleware('auth');		$this->beforeFilter('csrf',array('on'=>'post'));	}	public function getEquipment(){		$categories =array();		$types = array();		$parts = array();		foreach (RefCategory::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get() as $category) {			$categories[$category->id] = $category->description;		}		foreach (RefType::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get() as $type) {			$types[$type->id] = $type->description;		}		foreach (RefPart::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get() as $part) {			$parts[$part->id] = $part->description;		}		// $basic = BasicEquipment::with('category','type','part')		// 	->where('project_id','=',Session::get('project_id'))		// 	->where('active','=',1)		// 	->get();		$basic = DB::Select(DB::raw("select c.description as 'category',t.description as 'types',p.description as 'parts',b.* from basic_equipments binner join ref_categories con b.category_id = c.idinner join ref_types ton b.type_id = t.idinner join ref_parts pon b.part_id = p.idwhere b.active = 1 and b.project_id = ".Session::get('project_id')));		return View::make('basic_data_setup.equipment.index')			->with('basics',$basic)			->with('categories',$categories)			->with('types',$types)			->with('parts',$parts);	}	public function postEquipment(){		$validator = Validator::make(Input::all(),BasicEquipment::$rules);		if ($validator->passes()) {			$basice = BasicEquipment::where('category_id','=',Input::get('category_id'))				->where('type_id','=',Input::get('type_id'))				->where('part_id','=',Input::get('part_id'))				->where('project_id','=',Session::get('project_id'))				->where('active','=',1)				->get();			if (!$basice->isEmpty()) {				return Redirect::to('basic-data-setup/equipment')->withErrors('Data equipment duplicate !');			}else{				$basicequipment = new BasicEquipment;				$basicequipment->category_id = Input::get('category_id');				$basicequipment->created_by = Auth::user()->id;				$basicequipment->type_id = Input::get('type_id');				$basicequipment->part_id = Input::get('part_id');				$basicequipment->project_id = Session::get('project_id');				$basicequipment->save();				return Redirect::to('basic-data-setup/equipment')->with('message','Equipment Created');			}		}		return Redirect::to('basic-data-setup/equipment')			->withErrors($validator)->withInput();	}	public function postEditequipment(){		$categories =array();		$types = array();		$parts = array();		$equip = BasicEquipment::find(Input::get('id'));    	$cat = RefCategory::where('id','!=',$equip->category_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$type = RefType::where('id','!=',$equip->type_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$part = RefPart::where('id','!=',$equip->part_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$basic = BasicEquipment::with('category','type','part')			->where('id','=',Input::get('id'))			->where('active','=',1)			->where('project_id','=',Session::get('project_id'))			->get();		return View::make('basic_data_setup.equipment.edit')			->with('basics',$basic)			->with('cat',$cat)			->with('type',$type)			->with('part',$part);	}	public function postUpdateequipment(){   		$input = Input::all();		$input['updated_by'] = Auth::user()->id;		$check = BasicEquipment::where('id','!=',Input::get('id'))					->where('category_id','=',Input::get('category_id'))					->where('type_id','=',Input::get('type_id'))					->where('part_id','=',Input::get('part_id'))					->where('active','=',1)					->where('project_id','=',Session::get('project_id'))					->get();		if($check->isEmpty()){			$basic = BasicEquipment::find(Input::get('id'));   			$basic->update($input);   			return Redirect::to('basic-data-setup/equipment');		}else{			return Redirect::to('basic-data-setup/equipment')->withErrors('Equipment duplicate!');		}	}	public function postDestroyequipment(){		$basic = BasicEquipment::find(Input::get('id'));		$input=array();		$input['active'] = 0;		$input['updated_by'] = Auth::user()->id;		$basic->update($input);		echo "success";	}	///////////////////// Failure	public function getFailure(){		$modes = array();		$causes = array();		$desc_mode = array();		$desc_cause = array();		$desc_mode = RefFailureMode::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get();		$desc_cause = RefFailureCause::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get();		foreach ($desc_mode as $mode) {			$modes[$mode->id] = $mode->description;		}		foreach ($desc_cause as $cause) {			$causes[$cause->id] = $cause->description;		}		$basic = BasicFailure::with('mode','cause')			->where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get();		return View::make('basic_data_setup.failure.index')			->with('basics',$basic)			->with('modes',$modes)			->with('desc_mode',$desc_mode)			->with('desc_cause',$desc_cause)			->with('causes',$causes);	}	public function postFailure(){		$validator = Validator::make(Input::all(),BasicFailure::$rules);		if ($validator->passes()) {			$basicf = BasicFailure::where('mode_id','=',Input::get('mode_id'))				->where('cause_id','=',Input::get('cause_id'))				->where('project_id','=',Session::get('project_id'))				->where('active','=',1)				->get();			if (!$basicf->isEmpty()) {				return Redirect::to('basic-data-setup/failure')->withErrors('Data failure duplicate !');			}else{				$basicfailure = new BasicFailure;				$basicfailure->mode_id = Input::get('mode_id');				$basicfailure->cause_id = Input::get('cause_id');				$basicfailure->created_by = Auth::user()->id;				$basicfailure->project_id = Session::get('project_id');				$basicfailure->save();				return Redirect::to('basic-data-setup/failure')->with('message','Failure Created');			}		}		return Redirect::to('basic-data-setup/failure')			->withErrors($validator)->withInput();	}	public function postEditfailure(){		$failure = BasicFailure::find(Input::get('id'));    	$mode = RefFailureMode::where('id','!=',$failure->mode_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$cause = RefFailureCause::where('id','!=',$failure->cause_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$basic = BasicFailure::with('mode','cause')			->where('id','=',Input::get('id'))			->where('active','=',1)			->where('project_id','=',Session::get('project_id'))			->get();		return View::make('basic_data_setup.failure.edit')			->with('basics',$basic)			->with('modes',$mode)			->with('causes',$cause);	}	public function postUpdatefailure(){   		$input = Input::all();		$input['updated_by'] = Auth::user()->id;		$check = BasicFailure::where('id','!=',Input::get('id'))					->where('mode_id','=',Input::get('mode_id'))					->where('cause_id','=',Input::get('cause_id'))					->where('active','=',1)					->where('project_id','=',Session::get('project_id'))					->get();		if($check->isEmpty()){			$basic = BasicFailure::find(Input::get('id'));   			$basic->update($input);   			return Redirect::to('basic-data-setup/failure');		}else{			return Redirect::to('basic-data-setup/failure')->withErrors('Failure duplicate!');		}	}	public function postDestroyfailure(){		$basic = BasicFailure::find(Input::get('id'));		$input=array();		$input['active'] = 0;		$input['updated_by'] = Auth::user()->id;		$basic->update($input);		echo "success";	}	////////////// Task	public function getTask(){		$tlists =array();		$types = array();		$causes = array();		$desc_tlist =array();		$desc_types = array();		$desc_causes = array();		$desc_tlist = RefTaskList::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get();		$desc_types =RefTaskType::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get();		$desc_causes = RefFailureCause::where('project_id','=',Session::get('project_id'))			->where('active','=',1)			->get();		foreach ($desc_tlist as $list) {			$tlists[$list->id] = $list->description;		}		foreach ($desc_types as $type) {			$types[$type->id] = $type->description;		}		foreach ($desc_causes as $cause) {			$causes[$cause->id] = $cause->description;		}		$basictask = BasicTask::with('tasklist','cause','type')			->where('active','=',1)			->where('project_id','=',Session::get('project_id'))			->get();		return View::make('basic_data_setup.task.task')				->with('basictask',$basictask)				->with('desc_tlist',$desc_tlist)				->with('desc_types',$desc_types)				->with('desc_causes',$desc_causes)				->with('tlists',$tlists)				->with('types',$types)				->with('causes',$causes);	}	public function postTask(){		$validator = Validator::make(Input::all(),BasicTask::$rules);		if ($validator->passes()) {			$basicf = BasicTask::where('cause_id','=',Input::get('cause_id'))				->where('type_id','=',Input::get('type_id'))				->where('list_id','=',Input::get('list_id'))				->where('project_id','=',Session::get('project_id'))				->where('active','=',1)				->get();			if (!$basicf->isEmpty()) {				return Redirect::to('basic-data-setup/task')->withErrors('Data task duplicate !');			}else{				$basictask = new BasicTask;				$basictask->cause_id = Input::get('cause_id');				$basictask->type_id = Input::get('type_id');				$basictask->list_id = Input::get('list_id');				$basictask->created_by = Auth::user()->id;				$basictask->project_id = Session::get('project_id');				$basictask->save();				return Redirect::to('basic-data-setup/task')->with('message','Task Created');			}		}		return Redirect::to('basic-data-setup/task')			->withErrors($validator)->withInput();	}	public function postEdittask(){		$basictask = BasicTask::find(Input::get('id'));    	$cause = RefFailureCause::where('id','!=',$basictask->cause_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$type = RefTaskType::where('id','!=',$basictask->type_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$list = RefTaskList::where('id','!=',$basictask->list_id)    		->where('active','=',1)    		->where('project_id','=',Session::get('project_id'))    		->get();    	$basic = BasicTask::with('tasklist','cause','type')			->where('id','=',Input::get('id'))			->where('active','=',1)			->where('project_id','=',Session::get('project_id'))			->get();		return View::make('basic_data_setup.task.edit')			->with('basics',$basic)			->with('types',$type)			->with('lists',$list)			->with('causes',$cause);	}	public function postUpdatetask(){   		$input = Input::all();		$input['updated_by'] = Auth::user()->id;		$check = BasicTask::where('id','!=',Input::get('id'))					->where('cause_id','=',Input::get('cause_id'))					->where('type_id','=',Input::get('type_id'))					->where('list_id','=',Input::get('list_id'))					->where('active','=',1)					->where('project_id','=',Session::get('project_id'))					->get();		if($check->isEmpty()){			$basic = BasicTask::find(Input::get('id'));   			$basic->update($input);   			return Redirect::to('basic-data-setup/task');		}else{			return Redirect::to('basic-data-setup/task')->withErrors('Task duplicate!');		}	}	public function postDestroytask(){		$basic = BasicTask::find(Input::get('id'));		$input=array();		$input['active'] = 0;		$input['updated_by'] = Auth::user()->id;		$basic->update($input);		echo "success";	}	public function postImportbasictask(){		$input = array('file' => Input::file('upload'));		$rules = array(        	'file' => 'required|max:50000',    	);    	$validator = Validator::make($input, $rules);    	if ($validator->passes()) {    		$destinationPath = 'public/csv/task'; // upload path      		$extension = Input::file('upload')->getClientOriginalExtension();      		$fileName = rand(11111,99999).'.'.$extension;      		Input::file('upload')->move($destinationPath, $fileName);			Excel::filter('chunk')->load('public/csv/task/'.$fileName)				->chunk(250, function($results) {				if ($this->validateuniquetask($results)) {            		foreach ($results as $row) {            			$basic = new BasicTask;            			$basic->cause_id = $row->failure_cause;            			$basic->type_id = $row->task_type;            			$basic->list_id = $row->task_list;            			$basic->created_by = Auth::user()->id;            			$basic->project_id = Session::get('project_id');            			$basic->save();            		}				}else{					return Redirect::to('basic-data-setup/task')->withErrors('Import unique. Please check csv file again!');				}			});			return Redirect::to('basic-data-setup/task')->with('message','Import CSV Success');    	}    	return Redirect::to('basic-data-setup/task')			->withErrors($validator)->withInput();	}	public function validateuniquetask($data =array()){		$rs = array();		foreach ($data as $row){			$rs = BasicTask::where('project_id',Session::get('project_id'))			->where('active',1)			->where('type_id',$row->task_type)			->where('list_id',$row->task_list)			->where('cause_id',$row->failure_cause)			->get();			if (!$rs->isEmpty()) {				return false;			}else{				return true;			}		}	}	public function postImportbasicfailure(){		$input = array('file' => Input::file('upload'));		$rules = array(        	'file' => 'required|max:50000',    	);    	$validator = Validator::make($input, $rules);    	if ($validator->passes()) {    		$destinationPath = 'public/csv/failure'; // upload path      		$extension = Input::file('upload')->getClientOriginalExtension();      		$fileName = rand(11111,99999).'.'.$extension;      		Input::file('upload')->move($destinationPath, $fileName);			Excel::filter('chunk')->load('public/csv/failure/'.$fileName)				->chunk(250, function($results) {				if ($this->validateuniquefailure($results)) {            		foreach ($results as $row) {            			$basic = new BasicFailure;            			$basic->mode_id = $row->failure_mode;            			$basic->cause_id = $row->failure_cause;            			$basic->created_by = Auth::user()->id;            			$basic->project_id = Session::get('project_id');            			$basic->save();            		}				}else{					return Redirect::to('basic-data-setup/failure')->withErrors('Import unique. Please check csv file again!');				}			});			return Redirect::to('basic-data-setup/failure')->with('message','Import CSV Success');    	}    	return Redirect::to('basic-data-setup/failure')			->withErrors($validator)->withInput();	}	public function validateuniquefailure($data =array()){		$rs = array();		foreach ($data as $row){			$rs = BasicFailure::where('project_id',Session::get('project_id'))			->where('active',1)			->where('mode_id',$row->failure_mode)			->where('cause_id',$row->failure_cause)			->get();			if (!$rs->isEmpty()) {				return false;			}else{				return true;			}		}	}	public function getTemplatebasicfailure(){        $file="public/csv/demo/basic_failures.csv";        return Response::download($file);	}	public function getTemplatebasictask(){        $file="public/csv/demo/basic_tasks.csv";        return Response::download($file);	}}